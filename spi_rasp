import spidev
import time

# Configuración del SPI en la Raspberry Pi
SPI_BUS = 0     # SPI0
SPI_DEVICE = 0  # CE0 (Chip Enable 0)
SPI_SPEED_HZ = 4000000  # 1 MHz (puedes ajustarlo según el STM32)

def initialize_spi():
    """Inicializa la conexión SPI"""
    spi = spidev.SpiDev()
    spi.open(SPI_BUS, SPI_DEVICE)
    spi.max_speed_hz = SPI_SPEED_HZ
    spi.mode = 0  # CPOL=0, CPHA=0 (Motorola, primer flanco)
    spi.bits_per_word = 8  # Tamaño de palabra: 8 bits
    return spi

def send_start_message(spi):
    """Envía un mensaje al STM32 para indicarle que envíe datos."""
    start_message = 0xA5  # Mensaje de inicio (puedes cambiarlo)
    print(f"Enviando mensaje de inicio: 0x{start_message:02X}")
    spi.xfer2([start_message])  # Envía el mensaje al STM32
    time.sleep(0.01)  # Pequeño retardo para permitir respuesta del STM32

def process_byte(byte_received):
    """Procesa cada byte recibido desde el STM32."""
    print(f"Byte recibido: 0x{byte_received:02X}")
    # Aquí puedes añadir lógica para manejar los datos recibidos.

def main():
    # Inicializar SPI
    spi = initialize_spi()
    print("Conexión SPI inicializada.")

    try:
        while True:
            # Enviar mensaje de inicio al STM32
            send_start_message(spi)

            # Recibir un byte de respuesta del STM32
            byte_to_send = 0x00  # Envía un byte nulo para recibir un dato
            byte_received = spi.xfer2([byte_to_send])[0]

            # Procesar el byte recibido
            process_byte(byte_received)

            # Pausar (ajusta el intervalo según la aplicación)
            time.sleep(0.1)

    except KeyboardInterrupt:
        print("\nFinalizando comunicación SPI.")
    finally:
        spi.close()

if __name__ == "__main__":
    main()
